services:
 - docker:18-dind

variables:
  HELM_KUBE_IMAGE_VERSION: "3.5.3"
  STAGING_DEPLOY_TYPE: "install"
  PRODUCTION_DEPLOY_TYPE: "nothing"
  STAGING_INSTALL_STORGAGE: "true"
  PRODUCTION_INSTALL_STORGAGE: "false"

stages:
  - prepare-namespace-staging
  - prepare-staging
  - storage-staging
  - deploy-staging
  - auth-staging
  - ingress-staging
  - cert-manager-staging
  - prepare-namespace-production
  - prepare-production
  - storage-production
  - deploy-production
  - ingress-production
  - cert-manager-production


prepare-namespace-staging:
  image:
    name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: prepare-namespace-staging
  environment:
    name: staging
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl create namespace applications; fi
  allow_failure: true


prepare-staging:
  image:
    name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: prepare-staging
  environment:
    name: staging
    kubernetes:
      namespace: applications
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl delete replicaset application -n applications; fi
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl delete service application  -n applications; fi
  allow_failure: true


storage-staging:
  image:
    name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: storage-staging
  environment:
    name: staging
    kubernetes:
      namespace: applications
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$STAGING_INSTALL_STORGAGE" == "true" ]; then kubectl apply -f staging-storage.yml; fi


deploy-staging:
  image:
    name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: deploy-staging
  environment:
    name: staging
    kubernetes:
      namespace: applications
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/staging-application.yml; fi
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/staging-service.yml; fi

auth-staging:
 image:
   name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
   entrypoint: ["/bin/sh", "-c"]
 stage: auth-staging
 environment:
   name: staging
   kubernetes:
     namespace: applications
 script:
   - echo ${CI_JOB_NAME}
   - kubectl version
   - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/staging-auth-secret.yml; fi
   - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/staging-auth-middleware.yml; fi


ingress-staging:
  image:
    name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: ingress-staging
  environment:
    name: staging
    kubernetes:
      namespace: applications
  script:
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/staging-redirect-middleware.yml; fi
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/staging-ingress-route.yml; fi
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/staging-secure-ingress-route.yml; fi
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/staging-middleware.yml; fi


cert-manager-staging:
  image:
    name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: cert-manager-staging
  environment:
    name: staging
    kubernetes:
      namespace: applications
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/staging-issuer.yml; fi
    - if [ "$STAGING_DEPLOY_TYPE" == "install" ]; then kubectl apply -f staging/staging-solver.yml; fi

prepare-namespace-production:
  image:
    name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: prepare-namespace-staging
  environment:
    name: production
  when: manual
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl create namespace applications; fi
  allow_failure: true


prepare-production:
  image:
    name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: prepare-production
  environment:
    name: production
    kubernetes:
      namespace: applications
  when: manual
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl delete replicaset application -n applications; fi 
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl delete replicaset application -n applications; fi 
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl delete service application -n applications; fi 
  allow_failure: true



storage-production:
  image:
    name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: storage-production
  environment:
    name: production
    kubernetes:
      namespace: applications
  when: manual
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$PRODUCTION_INSTALL_STORGAGE" == "true" ]; then kubectl apply -f storage.yml; fi


deploy-production:
  image:
    name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: deploy-production
  environment:
    name: production
    kubernetes:
      namespace: applications
  when: manual
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/application.yml; fi
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/service.yml; fi


ingress-production:
  image:
    name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: ingress-production
  environment:
    name: production
    kubernetes:
      namespace: applications
  when: manual
  script:
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/redirect-middleware.yml; fi
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/ingress-route.yml; fi
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/secure-ingress-route.yml; fi
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/middleware.yml; fi


cert-manager-production:
  image:
    name: 'dtzar/helm-kubectl:$HELM_KUBE_IMAGE_VERSION'
    entrypoint: ["/bin/sh", "-c"]
  stage: cert-manager-production
  environment:
    name: production
    kubernetes:
      namespace: applications
  when: manual
  script:
    - echo ${CI_JOB_NAME}
    - kubectl version
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/issuer.yml; fi
    - if [ "$PRODUCTION_DEPLOY_TYPE" == "install" ]; then kubectl apply -f production/solver.yml; fi
